#!/bin/bash
#SBATCH --partition=workq
#SBATCH --job-name=wrf-udj-inshimtu-test
#SBATCH --time=01:00:00
#SBATCH --output=wrf-udj-inshimtu-test.%j.out
#SBATCH --error=wrf-udj-inshimtu-test.%j.err
#SBATCH --nodes=13
#SBATCH --ntasks=193
##SBATCH --ntasks-per-node=16
##SBATCH --ntasks=208
#SBATCH --cpus-per-task=1
#SBATCH --threads-per-core=1
#SBATCH --hint=nomultithread


## SETUP

# Configuration

#module swap PrgEnv-cray PrgEnv-intel
WRF_ROOT="/project/k1033/Development/WRF-4.0.3.intel_udj/"

UDJ_ROOT="/project/k1033/Development/UDJ/UDJ_TOOLS"
#PRODUCER_EXE="${UDJ_ROOT}/bin/producer_kvl_udj_flat.exe"
#PRODUCER_EXE="${UDJ_ROOT}/bin/wrf_imitator.exe"
PRODUCER_EXE="${WRF_ROOT}/run/wrf.exe"
#CONSUMER_EXE="${UDJ_ROOT}/bin/consumer_kvl_wrf_udj.exe"

INSHIMTU_ROOT="/project/k1033/Development/Inshimtu"
INSHIMTU_BUILD_DIR="$INSHIMTU_ROOT/build.shaheen"
INSHIMTU_EXE="${INSHIMTU_BUILD_DIR}/Inshimtu"
INSHIMTU_MODULES="${INSHIMTU_BUILD_DIR}/module.init"
INSHIMTU_TESTING="${INSHIMTU_ROOT}/testing"
INSHIMTU_CONFIG_FILE="${INSHIMTU_TESTING}/configs/udj_consumer-multivar-gridwriter.json"
INSHIMTU_PIPELINES="${INSHIMTU_ROOT}/examples/pipelines" #"${INSHIMTU_TESTING}/pipelines"

WORK_ROOT="/scratch/$USER/wrfudj-inshimtu-testing/chapalla-output"
WRFRUN_OUTPUT_DIR="$WORK_ROOT/wrfrun-output"
WRFRUN_DONE_FILE="$WORK_ROOT/wrfrun-output.done"

DPM_COORDINATION_ROOT="${WORK_ROOT}/_dpm"
LOG_OUTPUT_DIR="${WORK_ROOT}/_log"


export UDJ_CONSENSUS_DIR="${WORK_ROOT}/_udj"
export UDJ_TRANSPORT_ORDER=MPI
export UDJ_WORKFLOW_ID=wrfudj_inshimtu_test
#export UDJ_TRACE_ARGS=detail
#export UDJ_LOG_LEVEL=1
export UDJT_MPI_USE_DPM="no"
export UDJT_MPI_INIT_WAIT_CONNECTED=1

# Parameters

INSITU_NODES_COUNT=1
WRFRUN_TASKS_PER_NODE=16
CONSUMER_TASKS_PER_NODE=1 #16

WRFRUN_TOTAL_NODES=$(( SLURM_NNODES - INSITU_NODES_COUNT ))
WRFRUN_TOTAL_TASKS=$(( WRFRUN_TOTAL_NODES * WRFRUN_TASKS_PER_NODE ))

PRODUCER_TOTAL_TASKS=${WRFRUN_TOTAL_TASKS}
PRODUCER_RANKS="0-$((PRODUCER_TOTAL_TASKS-1))"

CONSUMER_TOTAL_TASKS=$(( INSITU_NODES_COUNT * CONSUMER_TASKS_PER_NODE ))
#CONSUMER_TOTAL_TASKS=$(( SLURM_NTASKS - PRODUCER_TOTAL_TASKS ))
CONSUMER_TASKS_START=$(( PRODUCER_TOTAL_TASKS ))
CONSUMER_TASKS_END=$(( PRODUCER_TOTAL_TASKS + CONSUMER_TOTAL_TASKS - 1 ))
CONSUMER_RANKS="${CONSUMER_TASKS_START}-${CONSUMER_TASKS_END}"

# NOTE: UDJ_SEND_PROC_DIMS="X1,X2,...,Xn" --> product[i=1..n](Xi) = PRODUCER_TOTAL_TASKS
# NOTE: UDJ_RECV_PROC_DIMS="X1,X2,...,Xn" --> product[i=1..n](Xi) = CONSUMER_TOTAL_TASKS
UDJ_SEND_PROC_DIMS="16,12,1"
UDJ_RECV_PROC_DIMS="1,1,1"  # "4,4,1"

export TWODIM_UDJ_SEND_PROC_DIMS=${UDJ_SEND_PROC_DIMS:0:5}
export TWODIM_UDJ_RECV_PROC_DIMS=${UDJ_RECV_PROC_DIMS:0:3}
export THREEDIM_UDJ_SEND_PROC_DIMS=${UDJ_SEND_PROC_DIMS:0:7}
export THREEDIM_UDJ_RECV_PROC_DIMS=${UDJ_RECV_PROC_DIMS:0:5}

export FILTER_VARNAME="QVAPOR,U,V,W,XLAT,XLONG,Z"
export COMPUTE_COORD=true

export MAX_NTRANSFERS=15
export REQ_NTRANSFERS=15


# Communicaton mode.
#export COMM_UDJ_MODE=DPM
export COMM_UDJ_MODE=MPMD
export ATP_ENABLED=0


# MPI IO Directives

# https://www.hpc.kaust.edu.sa/tips/multi-threaded-mpi
export MPICH_MAX_THREAD_SAFETY=multiple

# Displays all settings used by the MPI during execution
#export MPICH_ENV_DISPLAY=1
# Displays MPI version
#export MPICH_VERSION_DISPLAY=1
# Display ranks performing IO aggregation when using collective buffering
#export MPICH_MPIIO_AGGREGATOR_PLACEMENT_DISPLAY=1
# Display read/write operations statistics after collective buffering
#export MPICH_MPIIO_STATS=1
#Displays all the available I/O hints and their values
#export MPICH_MPIIO_HINTS_DISPLAY=1
# Set per-file striping (lustre / burst buffer)
#export MPICH_MPIIO_HINTS="wrfrst*:cb_nodes=40:,\
#wrfout*:cb_nodes=40:striping_unit=2097152,\
#wrfi*:cb_nodes=40:striping_unit=1048576"
#export MPICH_MPIIO_TIMERS=1

# https://wiki.mpich.org/mpich/index.php/Debug_Event_Logging
# NOTE: These env vars don't appear in MPICH_ENV_DISPLAY listing:
export MPICH_DBG=FILE
export MPICH_DBG_FILENAME="${LOG_OUTPUT_DIR}/_mpich_dbg-%w-%d-%p.log"
export MPICH_DBG_LEVEL=VERBOSE
export MPICH_DBG_CLASS=ALL  #=ROUTINE,COMM,NEM_SOCK_DET,CH3_CONNECT,CH3_DISCONNECT

# TODO: testing if useful...
#export MPICH_OPT_THREAD_SYNC=0
#export MPICH_MSG_QUEUE_DBG=1
#export MPICH_SMP_OFF=1


# Output Configuration
echo "Launching Basic UDJ Test - Producer / Consumer Flat"
echo "  WORK_ROOT=$WORK_ROOT"
echo "  WRFRUN_OUTPUT_DIR=$WRFRUN_OUTPUT_DIR"
echo "  UDJ_CONSENSUS_DIR=$UDJ_CONSENSUS_DIR"
echo "  DPM_COORDINATION_ROOT=$DPM_COORDINATION_ROOT"
echo "  LOG_OUTPUT_DIR=$LOG_OUTPUT_DIR"
echo "  SLURM_NNODES=$SLURM_NNODES"
echo "  SLURM_NTASKS=$SLURM_NTASKS"
echo "  COMM_UDJ_MODE=$COMM_UDJ_MODE"
echo "  PRODUCER_TOTAL_TASKS=$PRODUCER_TOTAL_TASKS"
echo "  PRODUCER_RANKS=$PRODUCER_RANKS"
echo "  CONSUMER_TOTAL_TASKS=$CONSUMER_TOTAL_TASKS"
echo "  CONSUMER_RANKS=$CONSUMER_RANKS"
echo "  UDJ_SEND_PROC_DIMS=$UDJ_SEND_PROC_DIMS"
echo "  UDJ_RECV_PROC_DIMS=$UDJ_RECV_PROC_DIMS"
echo "  TWODIM_UDJ_SEND_PROC_DIMS=$THREEDIM_UDJ_SEND_PROC_DIMS"
echo "  TWODIM_UDJ_RECV_PROC_DIMS=$THREEDIM_UDJ_RECV_PROC_DIMS"
echo "  THREEDIM_UDJ_SEND_PROC_DIMS=$THREEDIM_UDJ_SEND_PROC_DIMS"
echo "  THREEDIM_UDJ_RECV_PROC_DIMS=$THREEDIM_UDJ_RECV_PROC_DIMS"
echo "  INSHIMTU_CONFIG_FILE=$INSHIMTU_CONFIG_FILE"
echo "  UDJ_ROOT=$UDJ_ROOT"
echo "  PRODUCER_EXE=$PRODUCER_EXE"
echo "  INSHIMTU_EXE=$INSHIMTU_EXE"
echo "  SSH_CLIENT IP: ${SSH_CLIENT%% *}"


# Work Space Preparation

mkdir -p "${UDJ_CONSENSUS_DIR}"
mkdir -p "${DPM_COORDINATION_ROOT}"
mkdir -p "${LOG_OUTPUT_DIR}"
rm -rf "${UDJ_CONSENSUS_DIR}/"* "${DPM_COORDINATION_ROOT}/.mpidpm/"* \
       "${WORK_ROOT}/"dataoutfile*

ln -fs "${INSHIMTU_PIPELINES}" "${WORK_ROOT}"

# Verify wrf initialization

if [ ! -d "${WRFRUN_OUTPUT_DIR}" ] || [ ! -d "${WORK_ROOT}/wrfrun-initial/" ] || [ ! -d "${WORK_ROOT}/wrfrun-source/" ] ; then  
  echo "Missing directory ${WRFRUN_OUTPUT_DIR} or links to 'wrfrun-initial' or 'wrfrun-source'"
  echo " run './examples/workflows/wrfudj-inshimtu-chapalla/init_wrf_lustre.sh'"
  exit 1
fi

# Cleanup simulation output directory
rm -f rsl.error.* rsl.out.*
rm -f wrfrst_d* wrf-sur_d* wrfxtrm_d*
rm -f wrfout_d* wrfoutReady_d*

# Inshimtu is looking for a working directory relative pipeline directory...
ln -fs "${INSHIMTU_PIPELINES}" "${WRFRUN_OUTPUT_DIR}"


## MODULES

# Load Modules

if [ ! -e "${INSHIMTU_MODULES}" ]; then
  echo "Expecting modules: ${INSHIMTU_MODULES}"
  exit 1
fi
source "${INSHIMTU_MODULES}"
# TODO: Possibly remove Darshan (related) modules, if crashes encountered with producers

UDJ_LIB_DIR="/project/k1033/Development/UDJ/udj-build-nodpm-gcc/lib"
PROTOBUFC_LIB_DIR="/project/k1033/Development/UDJ/protobuf-c-build/lib"
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${UDJ_LIB_DIR}:${PROTOBUFC_LIB_DIR}

# TODO: Fix hack to force Inshimtu to use craympich-dpm
#    echo "${CONSUMER_RANKS} env LD_PRELOAD=/opt/cray/pe/lib64/libmpich_gnu_82.so.3 ${INSHIMTU_EXE} ... " >> "$LAUNCH_CONFIG"


## RUN

if [ ! -x "${INSHIMTU_EXE}" ]; then
  echo "Expecting executable: ${INSHIMTU_EXE}"
  exit 1
fi

# Launch

case $COMM_UDJ_MODE in
  DPM)
    export PMI_USE_DRC=1
    export PRODUCER_UDJ_RANKS="${PRODUCER_RANKS}"
    export MPICH_DPM_DIR="$DPM_COORDINATION_ROOT"

    echo PRODUCER_UDJ_RANKS="$PRODUCER_UDJ_RANKS"

    time srun --chdir="$WORK_ROOT" \
              --ntasks ${PRODUCER_TOTAL_TASKS} --nodes ${SLURM_NNODES} \
              --label --unbuffered \
              env PRODUCER=1 ${PRODUCER_EXE}

    # TODO: where is the consumer executed?
    ;;
  MPMD)
    export MPICH_DPM_DIR="$DPM_COORDINATION_ROOT"

    export PRODUCER_UDJ_RANKS=${PRODUCER_RANKS}
    export CONSUMER_UDJ_RANKS=${CONSUMER_RANKS}
    echo "PRODUCER_UDJ_RANKS=$PRODUCER_UDJ_RANKS"
    echo "CONSUMER_UDJ_RANKS=$CONSUMER_UDJ_RANKS"

    LAUNCH_CONFIG="${WORK_ROOT}/launch.conf"
    echo "${PRODUCER_RANKS} env PRODUCER=1 ${PRODUCER_EXE} " > "$LAUNCH_CONFIG"
    echo "${CONSUMER_RANKS} env LD_PRELOAD=/opt/cray/pe/lib64/libmpich_gnu_82.so.3 ${INSHIMTU_EXE} --udj-mode=mpmd -n ${CONSUMER_RANKS} -N ${CONSUMER_RANKS} -P ${PRODUCER_RANKS} -V trace -c ${INSHIMTU_CONFIG_FILE} --udj-process-dims-producer=${UDJ_SEND_PROC_DIMS} --process-dims-inporter=${UDJ_RECV_PROC_DIMS}" >> "$LAUNCH_CONFIG"

    srun --chdir="$WRFRUN_OUTPUT_DIR" \
         --ntasks $((PRODUCER_TOTAL_TASKS + CONSUMER_TOTAL_TASKS)) \
         --label --unbuffered --multi-prog "$LAUNCH_CONFIG"

    ;;
  ?)
    echo "You have to specify COMM_UDJ_MODE"
    exit 1
    ;;
esac

